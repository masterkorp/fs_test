#! /bin/sh
### BEGIN INIT INFO
# Provides:          freeswitch
# Required-Start:    $network $local_fs $remote_fs
# Required-Stop:     $network $local_fs $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: The FreeSWITCH Voice Switching System
# Description:       An advanced platform for voice services
### END INIT INFO

# Author: Alfredo Palhares <masterkorp@masterkorp.net>

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="FreeSWITCH Voice Switching System"
NAME=freeswitch
DAEMON=/usr/bin/$NAME
USER=freeswitch
GROUP=daemon
PIDFILE=/var/run/$NAME/$NAME.pid
RUNDIR=/var/run/freeswitch
SCRIPTNAME=/etc/init.d/$NAME


# Read configuration variable file if it is present
if [ -r /etc/default/$NAME ]; then 
  . /etc/default/$NAME 
fi                                           

if [ "$FREESWITCH_ENABLED" != "true" ]; then 
  echo "$DESC not enabled yet. Edit /etc/default/$NAME first."
  exit 0
fi

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

#
# Function that sets ulimit values for the daemon
#
do_setlimits() {
  ulimit -c unlimited
  ulimit -d unlimited
  ulimit -f unlimited
  ulimit -n 999999
  ulimit -v unlimited
  ulimit -s 240
  ulimit -l unlimited
  return 0
}

#
# Function that starts the daemon/service
#
do_start()
{

	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	start-stop-daemon --quiet --start --pidfile $PIDFILE --exec $DAEMON --test || return 1
	do_setlimits
	start-stop-daemon --quiet --start --pidfile $PIDFILE --exec $DAEMON -- -u $USER -g $GROUP $FREESWITCH_PARAMS || return 1
  return 0
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	$DAEMON -stop
	start-stop-daemon --stop --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	start-stop-daemon -c $USER --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	start-stop-daemon -c $USER --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
	return 0
}

case "$1" in
  start)
    log_daemon_msg "Starting $DESC \n" 
    do_start
    case "$?" in
      0|1) 
        log_end_msg 0 
      ;;
      2) 
        log_end_msg 1 
      ;;
    esac
	;;
  stop)
    log_daemon_msg "Stopping $DESC \n"
    do_stop
    case "$?" in
      0|1) 
        log_end_msg 0 
      ;;
      2) 
        log_end_msg 1 
      ;;
    esac
	;;
  reload|force-reload)
    log_daemon_msg "Reloading $DESC \n"
    do_reload
    log_end_msg $?
  ;;
  restart)
    log_daemon_msg "Restarting $DESC \n"
    do_stop
    case "$?" in
      0|1)
      do_start
      case "$?" in
        0)
          log_end_msg 0
        ;;
        1)
          log_end_msg 1
        ;;
        *)
          log_end_msg 1
        ;;
      esac
		;;
	  *)
		  log_end_msg 1
		;;
    esac
	;;
  *)
    echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
    exit 3
	;;
esac
